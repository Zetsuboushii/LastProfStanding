/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package lastprofstanding

import javafx.application.Application
import javafx.event.EventHandler
import javafx.scene.Scene
import javafx.scene.control.Button
import javafx.scene.layout.HBox
import javafx.scene.layout.VBox
import javafx.scene.text.Text
import javafx.stage.Stage
import lastprofstanding.engine.Engine
import lastprofstanding.engine.EngineState
import lastprofstanding.engine.Level
import lastprofstanding.engine.SimulationSpeed
import lastprofstanding.engine.grid.*

class MyCell : Cell(true), InteractiveCell<MyCell> {
    override fun testForSpawningNewCell(grid: Grid, position: GridPosition): Pair<MyCell, GridPosition> {
        return Pair(MyCell(), position + GridPosition(0, 1))
    }

    override fun clone(): Cell {
        return MyCell()
    }

    override val icon: Int = 5
    override val textRepresentation = "M"
}

class App : Application() {
    private var engine = Engine.getInstance()
    private lateinit var textField: Text
    private lateinit var stopSimulationBtn: Button
    private lateinit var startSimulationBtn: Button
    private lateinit var resetGridBtn: Button

    override fun start(primaryStage: Stage) {
        primaryStage.title = "Last Prof. Standing"

        textField = Text()

        stopSimulationBtn = Button("Stop simulation")
        stopSimulationBtn.onAction = EventHandler { stopSimulation() }

        startSimulationBtn = Button("Start simulation")
        startSimulationBtn.onAction = EventHandler { startSimulation() }

        resetGridBtn = Button("Reset grid")
        resetGridBtn.onAction = EventHandler { resetGrid() }

        val controlBar = HBox()
        controlBar.children.add(stopSimulationBtn)
        controlBar.children.add(startSimulationBtn)
        controlBar.children.add(resetGridBtn)

        val root = VBox()
        root.children.add(controlBar)
        root.children.add(textField)
        primaryStage.scene = Scene(root, 500.0, 500.0)
        primaryStage.show()

        resetGrid()
    }

    private fun resetGrid() {
        engine.load(Level.BASIC)
        updateUIWithState(engine.state)
    }

    private fun startSimulation() {
        engine.startSimulation(SimulationSpeed.X1) { state ->
            updateUIWithState(state)
        }
    }

    private fun updateUIWithState(state: EngineState) {
        textField.text = "${state.stats}\n${state.grid.getTextRepresentation()}"
    }

    private fun stopSimulation() {
        engine.stopSimulation()
    }
}

fun main() {
    Application.launch(App::class.java)
}